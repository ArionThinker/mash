#!/usr/bin/env -S pkgx php

<?php
    class PantryChecker {
        private $homebrew_url_365  = 'https://formulae.brew.sh/api/analytics/install/365d.json';
        private $homebrew_url_90   = 'https://formulae.brew.sh/api/analytics/install/90d.json';
        private $homebrew_url_30   = 'https://formulae.brew.sh/api/analytics/install/30d.json';
        private $homebrew_url      = '';
        private $homebrew_packages = array();
        private $pkgx_url          = 'https://pkgx.dev/pkgs/index.json';
        private $pkgx_packages     = array();
        private $minimum_count     = 100000;
        private $list              = '';
        private $output            = '';
        private $exceptions        = array();


        public function __construct() {
            $this->getArgs();
            $this->setExceptions();
            $this->getHomebrewPackages();
            $this->getPkgxPackages();
            $this->main();
        }

        private function getArgs() {
            $opts  = getopt('m:d:o:h');

            $help  = 'This is a small script that checks which packages are missing in the pkgx pantry compared to Homebrew.' . PHP_EOL;
            $help .= 'The search algorithm is quite primitive, so the results are very approximate.' . PHP_EOL . PHP_EOL;

            $help .= 'Usage: pantry-checker [options...]' . PHP_EOL . PHP_EOL;
            $help .= 'Options:' . PHP_EOL;
            $help .= '  -m <num>  Minimum count of installs' . PHP_EOL;
            $help .= '  -d <30|90|365>  Period (days)' . PHP_EOL;
            $help .= '  -o <filepath>  Output file' . PHP_EOL;
            $help .= '  -h  Help' . PHP_EOL . PHP_EOL;


            // Help
            if (isset($opts['h'])) {
                echo $help;
                exit;
            }
            
            // Output file
            if (isset($opts['o'])) {
                $this->output = $opts['o'];
                echo 'Output file: ' . $this->output . PHP_EOL;
            }
            
            // Minimum count
            if (isset($opts['m'])) {
                $this->minimum_count = (int) $opts['m'];
                echo 'Minimum count: ' . $this->minimum_count . PHP_EOL;
            }

            // Homebrew URL
            if (isset($opts['d'])) {
                switch ($opts['d']) {
                    case 30:
                        $this->homebrew_url = $this->homebrew_url_30;
                        echo 'Homebrew URL: ' . $this->homebrew_url_30 . PHP_EOL;
                        break;
                    case 90:
                        $this->homebrew_url = $this->homebrew_url_90;
                        echo 'Homebrew URL: ' . $this->homebrew_url_90 . PHP_EOL;
                        break;
                    case 365:
                        $this->homebrew_url = $this->homebrew_url_365;
                        echo 'Homebrew URL: ' . $this->homebrew_url_365 . PHP_EOL;
                        break;
                    default:
                        echo 'Invalid period value. Defaulting to 365 days.' . PHP_EOL;
                        $this->homebrew_url = $this->homebrew_url_365;
                        echo 'Homebrew URL: ' . $this->homebrew_url_365 . PHP_EOL;
                        break;
                }
            } else {
                $this->homebrew_url = $this->homebrew_url_365;
                echo 'Homebrew URL: ' . $this->homebrew_url_365 . PHP_EOL;
            }
        }


        private function main() {
            // loop through the homebrew packages
            foreach ($this->homebrew_packages as $package) {
                $package_installs = (int) str_replace(',', '', $package['count']);
                if ($package_installs < $this->minimum_count) {
                    continue;
                }

                $pkgx_results = $this->searchPkgxPackage($package['formula']);

                if (count($pkgx_results) === 0 && !in_array($package['formula'], $this->exceptions)) {
                    echo $package['formula'] . ' - ' . $package['count'] . ' installs; pkgx - not found' . PHP_EOL;

                    $this->list .= $package['formula'] . ' => ' . $package['count'] . ' installs' . PHP_EOL;
                }

            }

            if ($this->output) {
                // directory does not exist, so lets create it.
                if (!is_dir(dirname($this->output))) {
                    mkdir(dirname($this->output), 0777, true);
                }

                // write the file
                file_put_contents($this->output, $this->list);

                // format the file as a table
                $this->formatTextAsTable($this->output);
            }
        }

        private function getHomebrewPackages() {
            // get the homebrew packages from the homebrew API
            $homebrew_packages = json_decode(file_get_contents($this->homebrew_url), true);

            $this->homebrew_packages = isset($homebrew_packages['items']) ? $homebrew_packages['items'] : array();
        }

        private function getPkgxPackages() {
            // get the pkgx packages from the pkgx API
            $pkgx_packages = json_decode(file_get_contents($this->pkgx_url), true);
            
            $this->pkgx_packages = isset($pkgx_packages) ? $pkgx_packages : array();
        }

        private function searchPkgxPackage($string) {
            // search the pkgx packages for a string
            $results = array();

            // split the string into parts (version)
            $parts = explode('@', $string);

            $search_string = isset($parts[0]) ? $parts[0] : false;

            // remove the 'lib' prefix
            $search_string = str_replace('lib', '', $search_string);

            // remove the '-cli' suffix
            $search_string = str_replace('-cli', '', $search_string);

            // remove the 'python-' prefix
            $search_string = str_replace('python-', '', $search_string);

            // remove the 'docker-' prefix
            $search_string = str_replace('docker-', '', $search_string);

            // remove special characters
            $search_string = str_replace(array('+'), '', $search_string);

            // let's check if the string has '/'
            if (strpos($search_string, '/') !== false) {
                // if it does, let's split it into parts
                $parts = explode('/', $search_string);

                // we need to get the last part
                $search_string = $parts[count($parts) - 1];
            }

            // if the string is empty, return an empty array
            if (!$search_string) {
                return array();
            }
            
            // loop through the pkgx packages and search for the string
            foreach ($this->pkgx_packages as $package) {

                // strtolower package name and search string
                $package = strtolower($package['project']);
                $package_name = isset($package['name']) ? strtolower($package['name']) : '';
                $search_string = strtolower($search_string);

                if (strpos($package, $search_string) !== false) {
                    $results[] = $package;
                } else if ($package_name && strpos($package_name, $search_string) !== false) {
                    $results[] = $package_name;
                }
            }

            return $results;
        }

        private function setExceptions() {
            // these packages are in the pkgx pantry
            // but they names is different from the homebrew formula
            $this->exceptions = array(
                /* exisiting in pkgx pantry */
                'ca-certificates', 'libx11', 'jpeg-xl', 'libnghttp2',
                'awscli', 'icu4c', 'little-cms2', 'pcre2', 'libxcb',
                'xorgproto', 'krb5', 'libxext', 'libvmaf', 'libxau',
                'sdl2', 'graphite2', 'tcl-tk', 'gnu-tar', 'mongosh',
                'python-markupsafe', 'gtk+3', 'hdf5', 'svt-av1',
                'at-spi2-core', 'jupyterlab', 'glib-networking',
                'apache-arrow', 'argocd', 'gnu-getopt', 'flyctl',
                'dart-lang/dart/dart', 'python-typing-extensions',
                'bdw-gc', 'hashicorp/tap/terraform', 'libvidstab',
                'docker-compose', 'py3cairo', 'pygobject3', 'gnu-sed',
                'hicolor-icon-theme', 'utf8cpp', 'swiftlint', 'docker-compose',
                'mysql-client', 'pyenv', 'tidy-html5', 'the_silver_searcher', 
                'telnet', 'aws-sam-cli', 'python-urllib3', 'python-click',
                'ddev/ddev/ddev', 'libimagequant', 'fdk-aac', 'sonar-scanner',
                'mosh', 'jandedobbeleer/oh-my-posh/oh-my-posh', 'xcodesorg/made/xcodes',
                'libmng', 'python-hatchling', 'oh-my-posh', 'xcodes',
                /* removed by owner */ 
                'moreutils', 'atuin'
            );
        }

        private function formatTextAsTable($filename) {
            // format the output file as a table
            $text = file_get_contents($filename);

            $lines = explode(PHP_EOL, $text);

            $max_length = 0;

            foreach ($lines as $line) {
                $parts = explode('=>', $line);

                $formula = trim($parts[0]);

                if (strlen($formula) > $max_length) {
                    $max_length = strlen($formula);
                }
            }

            $output = '';

            foreach ($lines as $line) {
                $parts = explode('=>', $line);

                if (!isset($parts[0]) || !isset($parts[1]) || !$parts[0] || !$parts[1]) {
                    continue;
                }

                $formula = trim($parts[0]);
                $installs = trim($parts[1]);

                $output .= str_pad($formula, $max_length + 1) . '=> ' . $installs . PHP_EOL;
            }

            file_put_contents($filename, $output);
        }
    }

    $pantry_checker = new PantryChecker();
